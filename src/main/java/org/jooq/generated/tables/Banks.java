/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.BanksRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Banks extends TableImpl<BanksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.banks</code>
     */
    public static final Banks BANKS = new Banks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BanksRecord> getRecordType() {
        return BanksRecord.class;
    }

    /**
     * The column <code>public.banks.account_number</code>.
     */
    public final TableField<BanksRecord, String> ACCOUNT_NUMBER = createField(DSL.name("account_number"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.banks.trust</code>.
     */
    public final TableField<BanksRecord, Double> TRUST = createField(DSL.name("trust"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.banks.transaction_fee</code>.
     */
    public final TableField<BanksRecord, Integer> TRANSACTION_FEE = createField(DSL.name("transaction_fee"), SQLDataType.INTEGER.nullable(false), this, "");

    private Banks(Name alias, Table<BanksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Banks(Name alias, Table<BanksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.banks</code> table reference
     */
    public Banks(String alias) {
        this(DSL.name(alias), BANKS);
    }

    /**
     * Create an aliased <code>public.banks</code> table reference
     */
    public Banks(Name alias) {
        this(alias, BANKS);
    }

    /**
     * Create a <code>public.banks</code> table reference
     */
    public Banks() {
        this(DSL.name("banks"), null);
    }

    public <O extends Record> Banks(Table<O> child, ForeignKey<O, BanksRecord> key) {
        super(child, key, BANKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BanksRecord> getPrimaryKey() {
        return Keys.BANKS_PK;
    }

    @Override
    public Banks as(String alias) {
        return new Banks(DSL.name(alias), this);
    }

    @Override
    public Banks as(Name alias) {
        return new Banks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Banks rename(String name) {
        return new Banks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Banks rename(Name name) {
        return new Banks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Double, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
