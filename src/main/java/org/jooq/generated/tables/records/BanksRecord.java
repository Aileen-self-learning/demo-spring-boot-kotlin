/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.generated.tables.Banks;
import org.jooq.generated.tables.interfaces.IBanks;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BanksRecord extends UpdatableRecordImpl<BanksRecord> implements Record3<String, Double, Integer>, IBanks {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.banks.account_number</code>.
     */
    @Override
    public void setAccountNumber(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.banks.account_number</code>.
     */
    @Override
    public String getAccountNumber() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.banks.trust</code>.
     */
    @Override
    public void setTrust(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.banks.trust</code>.
     */
    @Override
    public Double getTrust() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.banks.transaction_fee</code>.
     */
    @Override
    public void setTransactionFee(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.banks.transaction_fee</code>.
     */
    @Override
    public Integer getTransactionFee() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Double, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Double, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Banks.BANKS.ACCOUNT_NUMBER;
    }

    @Override
    public Field<Double> field2() {
        return Banks.BANKS.TRUST;
    }

    @Override
    public Field<Integer> field3() {
        return Banks.BANKS.TRANSACTION_FEE;
    }

    @Override
    public String component1() {
        return getAccountNumber();
    }

    @Override
    public Double component2() {
        return getTrust();
    }

    @Override
    public Integer component3() {
        return getTransactionFee();
    }

    @Override
    public String value1() {
        return getAccountNumber();
    }

    @Override
    public Double value2() {
        return getTrust();
    }

    @Override
    public Integer value3() {
        return getTransactionFee();
    }

    @Override
    public BanksRecord value1(String value) {
        setAccountNumber(value);
        return this;
    }

    @Override
    public BanksRecord value2(Double value) {
        setTrust(value);
        return this;
    }

    @Override
    public BanksRecord value3(Integer value) {
        setTransactionFee(value);
        return this;
    }

    @Override
    public BanksRecord values(String value1, Double value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IBanks from) {
        setAccountNumber(from.getAccountNumber());
        setTrust(from.getTrust());
        setTransactionFee(from.getTransactionFee());
    }

    @Override
    public <E extends IBanks> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BanksRecord
     */
    public BanksRecord() {
        super(Banks.BANKS);
    }

    /**
     * Create a detached, initialised BanksRecord
     */
    public BanksRecord(String accountNumber, Double trust, Integer transactionFee) {
        super(Banks.BANKS);

        setAccountNumber(accountNumber);
        setTrust(trust);
        setTransactionFee(transactionFee);
    }

    /**
     * Create a detached, initialised BanksRecord
     */
    public BanksRecord(org.jooq.generated.tables.pojos.Banks value) {
        super(Banks.BANKS);

        if (value != null) {
            setAccountNumber(value.getAccountNumber());
            setTrust(value.getTrust());
            setTransactionFee(value.getTransactionFee());
        }
    }
}
